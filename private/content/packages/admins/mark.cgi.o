use strict;
use FWork::System;
use utf8;
use Mark;
use Goods;

sub mark {
  my $self = shift;
  my $in = $system->in;
  
  my $mobj = Mark->new();
  if($in->query('save')) {
    foreach my $k ($in->find_query('good_(.+?)')) {
      $k =~ s/^good_//;
      $mobj->link_mark(
        mark_id => $in->query('good_' . $k),
        good_id => $k
      );
    }
  }
  
  my $start = 1;
  my $page = 50;
  $start = $in->query('start') if $in->query('start');
  my $end = $start + $page;
  
  $self->{vars}->{marks} = $mobj->get_marks;
  my $links = $mobj->get_all_links();
#   $system->dump($links);
  my $gobj = Goods->new();
  my $goods = $gobj->get_all_goods();
  
  my $bad_goods; my $i = 1;
  foreach my $g (@$goods) {
    my $chk;
    foreach my $l (@$links) {
#       $system->dump($l);
      next if $g->{good_id} != $l->{good_id};
      $chk = 1;
      last;
    }
    if(not $chk) {
      push @{$self->{vars}->{bad_goods}}, $g if $i >= $start and $i < $end;
      $i ++;
      last if $i >= $end;
    }
  }
  $self->{vars}->{next} = $end;
#   $system->dump($bad_goods);
#   foreach my $m (@{$self->{vars}->{marks}}) {
#     
#   }
  
#   $system->dump($self->{vars}->{marks});
  
  $self->{vars}->{action} = 'mark';
  my $content = $self->_template()->parse($self->{vars});
  $system->out->say($content);
  $system->stop;
}

1;
